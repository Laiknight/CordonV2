@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" Style="text-align: center;" GutterBottom="true">FILE UPLOAD</MudText>

<MudFileUpload T="IBrowserFile" OnFilesChanged="FileUploaded">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@code {
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public DateTimeOffset LastModified { get; set; }
    public string ErrorMessage { get; set; } = "";
    public bool dataUploaded { get; set; } = false;

    StreamReader? reader;
    List<ReaderEvent> readerEvents = new List<ReaderEvent>();

    const int MAX_FILESIZE = 5120000;

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile != null)
        {
            FileSize = browserFile.Size;
            FileType = browserFile.ContentType;
            FileName = browserFile.Name;
            LastModified = browserFile.LastModified;

            try
            {
                ErrorMessage = "";
                var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);

                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(browserFile.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                reader = new StreamReader(targetFilePath);
                await ReadFile();
                reader.Close();

                dataUploaded = true;
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

    async Task ReadFile()
    {
        if(reader != null)
        {
            var line = await reader.ReadLineAsync();
            line = await reader.ReadLineAsync();
            while (line != null)
            {
                var fields = line.Split(',');

                if (fields.Length == 6)
                {
                    var readerEvent = new ReaderEvent(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5]);
                    readerEvents.Add(readerEvent);
                }
            }
            line = await reader.ReadLineAsync();
        }
    }

    public class ReaderEvent
    {
        public string? eventTime { get; set; }
        public string? location { get; set; }
        public string? readerDesc { get; set; }
        public string? idHash { get; set; }
        public string? devID { get; set; }
        public string? machine { get; set; }

        public ReaderEvent(string? eventTime, string? location, string? readerDesc, string? idHash, string? devID, string? machine)
        {
            this.eventTime = eventTime;
            this.location = location;
            this.readerDesc = readerDesc;
            this.idHash = idHash;
            this.devID = devID;
            this.machine = machine;
        }
    }
}